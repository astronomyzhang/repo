<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <parent>
        <groupId>com.siemens.ofm</groupId>
        <artifactId>ofm</artifactId>
        <version>1.0-SNAPSHOT</version>
        <relativePath>../pom-refactor.xml</relativePath>
    </parent>

    <modelVersion>4.0.0</modelVersion>

    <groupId>com.siemens.dasheng</groupId>
    <artifactId>ofm-da-core</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>jar</packaging>

    <dependencies>

        <dependency>
            <groupId>com.siemens.pilinuxdriver</groupId>
            <artifactId>pi-linux-driver</artifactId>
        </dependency>
        <dependency>
            <groupId>com.magus.driver</groupId>
            <artifactId>magus-dirver</artifactId>
        </dependency>

        <dependency>
            <groupId>net.javacrumbs.shedlock</groupId>
            <artifactId>shedlock-spring</artifactId>
        </dependency>

        <dependency>
            <groupId>net.javacrumbs.shedlock</groupId>
            <artifactId>shedlock-provider-jdbc-template</artifactId>
        </dependency>

        <dependency>
            <groupId>com.siemens.ofm</groupId>
            <artifactId>ofm-da-worker</artifactId>
        </dependency>

        <dependency>
            <groupId>com.siemens.ofm</groupId>
            <artifactId>ofm-da-opcua-util</artifactId>
            <version>1.2.1-SNAPSHOT</version>
        </dependency>

        <!--dependencyManagement 重构-->

        <dependency>
            <groupId>com.ctrip.framework.apollo</groupId>
            <artifactId>apollo-client</artifactId>
        </dependency>
        <dependency>
            <groupId>com.ctrip.framework.apollo</groupId>
            <artifactId>apollo-openapi</artifactId>
        </dependency>

        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
        </dependency>

        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_hotspot</artifactId>
        </dependency>
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_spring_boot</artifactId>
        </dependency>
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient_servlet</artifactId>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.json</groupId>
            <artifactId>json</artifactId>
        </dependency>

        <dependency>
            <groupId>org.jarbframework</groupId>
            <artifactId>jarb-constraints</artifactId>
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <dependency>
            <groupId>net.logstash.logback</groupId>
            <artifactId>logstash-logback-encoder</artifactId>
        </dependency>

        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <exclusions>
                <!-- declare the exclusion here -->
                <exclusion>
                    <groupId>com.alibaba</groupId>
                    <artifactId>jconsole</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.alibaba</groupId>
                    <artifactId>tools</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--Mybatis-->
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mybatis</groupId>
            <artifactId>mybatis-spring</artifactId>
        </dependency>
        <!-- Mybatis Generator -->
        <dependency>
            <groupId>org.mybatis.generator</groupId>
            <artifactId>mybatis-generator-core</artifactId>
            <scope>compile</scope>
            <optional>true</optional>
        </dependency>
        <!--分页插件-->
        <dependency>
            <groupId>com.github.pagehelper</groupId>
            <artifactId>pagehelper</artifactId>
        </dependency>
        <!--通用Mapper-->
        <dependency>
            <groupId>tk.mybatis</groupId>
            <artifactId>mapper</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>javax.persistence</groupId>
                    <artifactId>persistence-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>javax.persistence-api</artifactId>
        </dependency>

        <!--alibaba's json helper-->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <scope>compile</scope>
        </dependency>

        <!--Apache POI - Java API To Access Microsoft Format Files-->
        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml</artifactId>
        </dependency>

        <!--size of agent-->
        <!--<dependency>
            <groupId>com.siemens.siesam</groupId>
            <artifactId>SizeOfAgent</artifactId>
        </dependency>

        <dependency>
            <groupId>com.belerweb</groupId>
            <artifactId>pinyin4j</artifactId>
        </dependency>-->

        <dependency>
            <groupId>com.siemens.siesam</groupId>
            <artifactId>ojdbc</artifactId>
        </dependency>

        <!-- gson -->
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
        </dependency>

        <!-- jasypt dependency -->
        <dependency>
            <groupId>com.github.ulisesbocchio</groupId>
            <artifactId>jasypt-spring-boot-starter</artifactId>
        </dependency>

        <!-- scheduler -->
        <dependency>
            <groupId>org.quartz-scheduler</groupId>
            <artifactId>quartz</artifactId>
        </dependency>

        <!-- ehcache 缓存 -->
        <dependency>
            <groupId>net.sf.ehcache</groupId>
            <artifactId>ehcache</artifactId>
        </dependency>

        <!-- dpp-license-client -->
        <dependency>
            <groupId>com.siemens.siesam</groupId>
            <artifactId>lcs-client</artifactId>
        </dependency>

        <!-- mockito-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>commons-net</groupId>
            <artifactId>commons-net</artifactId>
        </dependency>
        <dependency>
            <groupId>com.siemens</groupId>
            <artifactId>ofm-common</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-logging</groupId>
            <artifactId>commons-logging</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-pool2</artifactId>
        </dependency>

        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
        </dependency>

        <dependency>
            <groupId>org.apache.poi</groupId>
            <artifactId>poi-ooxml-schemas</artifactId>
        </dependency>

    </dependencies>


    <build>
        <plugins>

            <!-- skip test -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.18.1</version>
                <configuration>
                    <skipTests>true</skipTests>
                    <includes>
                        <include>**/DataConnectorServiceTest.java</include>
                        <include>**/DataProviderServiceTest.java</include>
                        <include>**/DataConnectorApplyServiceTest.java</include>
                    </includes>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>cobertura-maven-plugin</artifactId>
                <version>2.7</version>
                <configuration>
                    <formats>
                        <format>html</format>
                        <format>xml</format>
                    </formats>
                    <instrumentation>
                        <!--<excludes>
                            <exclude>**/activemq/*.class</exclude>
                            <exclude>**/apolloconfig/*.class</exclude>
                        </excludes>-->
                        <includes>
                            <include>**/DataConnectorService.class</include>
                            <include>**/DataProviderService.class</include>
                            <include>**/DataConnectorApplyService.class</include>
                        </includes>
                    </instrumentation>
                    <check/>
                </configuration>
                <executions>
                    <execution>
                        <id>core-cobertura-report</id>
                        <goals>
                            <goal>cobertura</goal>
                        </goals>
                        <phase>test</phase>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.mybatis.generator</groupId>
                <artifactId>mybatis-generator-maven-plugin</artifactId>
                <version>1.3.2</version>
                <configuration>
                    <verbose>true</verbose>
                    <overwrite>true</overwrite>
                </configuration>
            </plugin>
            <!-- ProGuard混淆插件-->
            <plugin>
                <groupId>com.github.wvengen</groupId>
                <artifactId>proguard-maven-plugin</artifactId>
                <version>2.0.13</version>
                <executions>
                    <execution>
                        <!-- 混淆时刻，这里是打包的时候混淆-->
                        <phase>package</phase>
                        <goals>
                            <!-- 使用插件的什么功能，当然是混淆-->
                            <goal>proguard</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <!-- 是否将生成的PG文件安装部署-->
                    <attach>true</attach>
                    <!-- 是否混淆-->
                    <obfuscate>true</obfuscate>
                    <!-- 指定生成文件分类 -->
                    <attachArtifactClassifier>pg</attachArtifactClassifier>
                    <options>
                        <!-- JDK目标版本1.8-->
                        <option>-target 1.8</option>
                        <!-- 不做收缩（删除注释、未被引用代码）-->
                        <option>-dontshrink</option>
                        <!-- 不做优化（变更代码实现逻辑）-->
                        <option>-dontoptimize</option>
                        <!-- 不路过非公用类文件及成员-->
                        <option>-dontskipnonpubliclibraryclasses</option>
                        <option>-dontskipnonpubliclibraryclassmembers</option>
                        <!-- 优化时允许访问并修改有修饰符的类和类的成员 -->
                        <option>-allowaccessmodification</option>
                        <!-- 确定统一的混淆类的成员名称来增加混淆-->
                        <option>-useuniqueclassmembernames</option>

                        <!--保证spring注解能力-->
                        <!--<option>&#45;&#45;keepdirectories</option>-->

                        <!-- 不混淆所有包名，本人测试混淆后WEB项目问题实在太多，毕竟Spring配置中有大量固定写法的包名-->
                        <option>-keeppackagenames</option>
                        <!-- 不混淆所有特殊的类-->
                        <option>-keepattributes
                            Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,LocalVariable*Table,*Annotation*,Synthetic,EnclosingMethod
                        </option>
                        <!-- 不混淆所有的set/get方法，毕竟项目中使用的部分第三方框架（例如Shiro）会用到大量的set/get映射-->
                        <option>-keepclassmembers public class * {void set*(***);*** get*();}</option>

                        <!-- 不混淆commonmodel，model包中的所有类以及类的属性及方法，实体包，混淆了会导致前端无法识别-->
                        <option>-keep class com.siemens.dasheng.web.model.** {*;}</option>


                        <!-- 非核心业务类，不作混淆 -->
                        <option>-keep class com.siemens.dasheng.web.apolloconfig.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.cache.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.conf.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.enums.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.exception.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.event.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.mapper.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.mapperfactory.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.threadpool.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.log.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.util.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.validators.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.model.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.generalmodel.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.page.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.request.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.response.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.routingmessage.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.schedule.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.strategy.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.service.** {*;}</option>
                        <option>-keep class com.siemens.dasheng.web.Swagger2 {*;}</option>

                        <!-- Spring管理的Bean，不对包类的类名进行混淆，但对类中的属性和方法混淆-->
                        <option>-keep class com.siemens.dasheng.web.controller.**</option>
                        <option>-keep class com.siemens.dasheng.web.singleton.**</option>
                        <option>-keep class com.siemens.dasheng.web.interceptor.**</option>

                        <!-- 不混淆启动类，否则spring-boot不能正常启动 -->
                        <option>-keep class com.siemens.dasheng.web.DaCoreApplication</option>

                        <!-- 忽略打包时的告警信息 -->
                        <option>-ignorewarnings</option>

                    </options>
                    <outjar>${project.build.finalName}-pg.jar</outjar>
                    <!-- 添加依赖，这里你可以按你的需要修改，这里测试只需要一个JRE的Runtime包就行了 -->
                    <libs>
                        <lib>${java.home}/lib/rt.jar</lib>
                        <lib>${java.home}/lib/jce.jar</lib>
                    </libs>
                    <!-- 加载文件的过滤器，就是你的工程目录了-->
                    <inFilter>com/siemens/dasheng/**</inFilter>
                    <!-- 对什么东西进行加载，这里仅有classes成功，毕竟你也不可能对配置文件及JSP混淆吧-->
                    <injar>classes</injar>
                    <!-- 输出目录-->
                    <outputDirectory>${project.build.directory}</outputDirectory>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>appassembler-maven-plugin</artifactId>
                <version>2.0.0</version>
                <configuration>
                    <assembleDirectory>target/app</assembleDirectory>
                    <repositoryName>lib</repositoryName>
                    <repositoryLayout>flat</repositoryLayout>
                    <!-- 配置文件的目标目录 -->
                    <configurationDirectory>conf</configurationDirectory>
                    <!-- 拷贝配置文件到上面的目录中 -->
                    <copyConfigurationDirectory>true</copyConfigurationDirectory>
                    <!-- 从哪里拷贝配置文件 (默认src/main/config) -->
                    <configurationSourceDirectory>src/main/resources</configurationSourceDirectory>
                    <filterConfigurationDirectory>true</filterConfigurationDirectory>
                    <useWildcardClassPath>true</useWildcardClassPath>
                    <programs>
                        <program>
                            <mainClass>com.siemens.dasheng.web.DaCoreApplication</mainClass>
                            <name>Application</name>
                            <jvmSettings>
                                <extraArguments>
                                    <extraArgument>-Dapp.init.name="DaCoreApplication"</extraArgument>
                                    <extraArgument>-server</extraArgument>
                                    <extraArgument>-Xmx4G</extraArgument>
                                    <extraArgument>-Xms4G</extraArgument>
                                </extraArguments>
                            </jvmSettings>
                        </program>
                    </programs>
                </configuration>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>assemble</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>


    </build>

    <!-- mvn传入-P debug 参数时激活-->
    <profiles>
        <profile>
            <id>debug</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>appassembler-maven-plugin</artifactId>
                        <version>2.0.0</version>
                        <configuration>
                            <assembleDirectory>target/app</assembleDirectory>
                            <repositoryName>lib</repositoryName>
                            <repositoryLayout>flat</repositoryLayout>
                            <!-- 配置文件的目标目录 -->
                            <configurationDirectory>conf</configurationDirectory>
                            <!-- 拷贝配置文件到上面的目录中 -->
                            <copyConfigurationDirectory>true</copyConfigurationDirectory>
                            <!-- 从哪里拷贝配置文件 (默认src/main/config) -->
                            <configurationSourceDirectory>src/main/resources</configurationSourceDirectory>
                            <filterConfigurationDirectory>true</filterConfigurationDirectory>
                            <useWildcardClassPath>true</useWildcardClassPath>
                            <programs>
                                <program>
                                    <mainClass>com.siemens.dasheng.web.DaCoreApplication</mainClass>
                                    <name>Application</name>
                                    <jvmSettings>
                                        <extraArguments>
										    <extraArgument>-Denv="DEV"</extraArgument>
                                            <extraArgument>-Dapollo.meta="http://service-apollo-config-server-dev.sre:8080"</extraArgument>
                                            <extraArgument>-Dapollo.configService="http://service-apollo-config-server-dev.sre:8080"</extraArgument>
                                            <extraArgument>-Dapp.init.name="DaCoreApplication"</extraArgument>
                                            <extraArgument>-server</extraArgument>
                                            <extraArgument>-Xmx2G</extraArgument>
                                            <extraArgument>-Xms2G</extraArgument>
                                            <!--<extraArgument>-agentlib:jdwp=transport=dt_socket,address=3000,server=y,suspend=n</extraArgument>-->
                                        </extraArguments>
                                    </jvmSettings>
                                </program>
                            </programs>
                        </configuration>
                        <executions>
                            <execution>
                                <phase>package</phase>
                                <goals>
                                    <goal>assemble</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

</project>